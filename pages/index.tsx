import { GetServerSidePropsContext, GetStaticPropsContext } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import styles from "../styles/Home.module.css";
import { useTranslations, useIntl } from "next-intl";
import { useRouter } from "next/router";
import { parseISO } from "date-fns";
// import banner1 from "../public/img/banner1.jpg";
// import banner2 from "../public/img/banner2.jpg";
// import banner3 from "../public/img/banner3.jpg";
// import banner4 from "../public/img/banner4.jpg";

export default function Home() {
  const t = useTranslations("Home");
  const { locale } = useRouter();
  const lastUpdated = parseISO("2021-12-23T10:04:45.567Z");
  const intl = useIntl();
  return (
    <div className={styles.container}>
      <Head>
        <title>Ecoflow</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* 这种形式的添加了配置的请求头，但是值不对 */}
      {/* <Image src={'/img/banner2.jpg'} width="300" height={200} alt=""></Image> */}
      {/* 这种可以正确添加缓存配置 */}
      {/* <Image src={banner3} width="300" height={200} alt=""></Image> */}

      {/* 测试t.rich */}
      <h1>
        {t.rich("hello", {
          locale,
          div: (children: any) => (
            <span style={{ color: "red" }}>{children}</span>
          ),
        })}
      </h1>
      {/* 测试多语言传参 */}
      {/* <h2>
        {t("lastUpdated", {
          lastUpdated,
          lastUpdatedRelative: intl.formatRelativeTime(lastUpdated),
        })}
      </h2> */}
      <h3>
        {t("params", {
          params: "这就是参数1",
          otherParams: '其他的参数'
        })}
      </h3>

      <div className="flex flex-col justify-center items-center md:flex-row my2 mx-auto md:pb-28 xl:my-8 xl:mx-32 2xl:my-8 2xl:mx-auto 2xl:w-[80rem]">
        <section className="lg:max-w-sm w-full">
          <h2 className="text-3xl max-w-3xl leading-10 lg:leading-[3.5rem] font-semibold lg:text-[3.25rem]">
            <span className="block text-[#705dcb] ">Deploy</span>
            JavaScript Globally
          </h2>
          <div className="mt-8">
            <div className="my-4">Instant deployments</div>
            <div className="my-4">Located in 34 regions worldwide</div>
            <div className="my-4">Zero config, zero maintenance</div>
            <div className="my-4">TypeScript, Wasm, ES Modules</div>
          </div>
        </section>
        <div className="flex flex-col gap-6 md:grid md:grid-rows-2 md:grid-cols-2 md:gap-3 w-full lg:ml-16">
          {/* 这里只能写具体的路径 */}
          <div
            className="bg-no-repeat bg-cover bg-center relative group rounded-xl w-full"
            style={{
              backgroundImage: `url(/img/banner1.jpg)`,
              aspectRatio: 16 / 10,
            }}
          >
            <Link
              href="/posts/a/1?name=5"
              as={`/posts/a/1`}
              className="absolute top-0 left-0 flex justify-center items-center w-full h-full opacity-0 group-hover:bg-[#026BEB] group-hover:opacity-100 rounded-xl"
            >
              <h2 className="text-white uppercase font-blod text-2xl">Blog</h2>
            </Link>
          </div>
          <div
            className="bg-no-repeat bg-cover bg-center relative group rounded-xl w-full"
            style={{
              backgroundImage: `url(/img/banner2.jpg)`,
              aspectRatio: 16 / 10,
            }}
          >
            <Link
              href="/posts/2/?age=16"
              as={`/posts/2`}
              className="absolute top-0 left-0 flex justify-center items-center w-full h-full opacity-0 group-hover:bg-[#026BEB] group-hover:opacity-100 rounded-xl"
            >
              <h2 className="text-white uppercase font-blod text-2xl">Blog</h2>
            </Link>
          </div>
          <div
            className="bg-no-repeat bg-cover bg-center relative group rounded-xl w-full"
            style={{
              backgroundImage: `url(/img/banner3.jpg)`,
              aspectRatio: 16 / 10,
            }}
          >
            <a
              href="#"
              className="absolute top-0 left-0 flex justify-center items-center w-full h-full opacity-0 group-hover:bg-[#026BEB] group-hover:opacity-100 rounded-xl"
            >
              <h2 className="text-white uppercase font-blod text-2xl">Blog</h2>
            </a>
          </div>
          <div
            className="bg-no-repeat bg-cover bg-center relative group rounded-xl w-full"
            style={{
              backgroundImage: `url(/img/banner4.jpg)`,
              aspectRatio: 16 / 10,
            }}
          >
            <a
              href="#"
              className="absolute top-0 left-0 flex justify-center items-center w-full h-full opacity-0 group-hover:bg-[#026BEB] group-hover:opacity-100 rounded-xl"
            >
              <h2 className="text-white uppercase font-blod text-2xl">Blog</h2>
            </a>
          </div>

          {/* 这种方式如果指定路径，就必须添加width属性 */}
          {/* <div>
            <Image src={banner2} alt="banner1"></Image>
          </div> */}
        </div>
      </div>
    </div>
  );
}

export async function getStaticProps({ locale }: GetStaticPropsContext) {
  return {
    props: {
      messages: (await import(`../locales/${locale}.json`)).default,
      // now: new Date().getTime()  // 没太看懂这个是啥意思
    },
  };
}
